from .PomManager import PomManager
from .constants import *
import travis_yml
import yaml
import os

# Function that is used to set up Travis for utilizing RTS tool
# assuming that:
#   the RTS tool uses some kind of cache for the work
#   the project is using Maven
# @param tag: the RTS tool tag to identify the cache location and
#    what configuration to use to support the RTS tool
# @param use_predefined_command: boolean to indicate if the mvn command that the CI
#    runs should be overwritten by predefined command according to the tag
#    since some RTS tools require specific mvn command to be run
#    Often use for generate RTS results to be analyzed.
# @param upload_reports: boolean to indicate if the build result will to send to
#    predefined endpoint (see constants.py). Usually there are two endpoints:
#    one for the CI build statistics that is generated by Travis
#    (format: https://docs.travis-ci.com/user/notifications#webhooks-delivery-format),
#    another endpoint for the individual test results generated by surefire-report.
#    The test results will be compressed into one compressed file to be sent.
# @param repo_dir: the local git directory where the Travis configuration file
#    can be found and modified.
# @return a list of files that are modified by the setup function
def travis_setup(tag, use_predefined_command, upload_reports, repo_dir):
    def restore_by_suffix(tag, suffix):
        return "(cd $HOME/{}_cache && find . -name '*.{}' -print | cpio -pvdumB /)".format(tag, suffix)

    def cache_by_suffix(tag, suffix):
        return "find $TRAVIS_BUILD_DIR -name '*.{}' -print | cpio -pvdumB $HOME/{}_cache".format(suffix, tag)

    def compress_test_reports():
        extract_job_number = r"`echo ${TRAVIS_JOB_NUMBER} | sed -e 's/[0-9]*\.//'`"
        return r"tar -zcf ${TRAVIS_BRANCH}_" + extract_job_number + r".tar.gz $HOME/report_placeholder"

    def report_uploader(predefined_after_script):
        predefined_after_script.append("find $TRAVIS_BUILD_DIR -name 'TEST*.xml' -print | cpio -pvdumB $HOME/report_placeholder")
        predefined_after_script.append(compress_test_reports())
        extract_job_number = r"`echo ${TRAVIS_JOB_NUMBER} | sed -e 's/[0-9]*\.//'`"
        predefined_after_script.append(r'curl -F "ekstazi=@${TRAVIS_BUILD_DIR}/${TRAVIS_BRANCH}_' + extract_job_number +r'.tar.gz" ' + REPORT_STORAGE_ENTRY)
        return predefined_after_script


    read_file = open(os.path.join(repo_dir, ".travis.yml"), 'r')
    travis_setting = yaml.load(read_file)
    read_file.close()
    # set up cache directory
    if "cache" not in travis_setting:
        travis_setting["cache"] = {}
    new_directories = ["$HOME/{}_cache".format(tag)]
    if "directories" in travis_setting["cache"]:
        if "$HOME/{}_cache".format(tag) not in travis_setting["cache"]["directories"]:
            travis_setting["cache"]["directories"] += new_directories
    else:
        travis_setting["cache"]["directories"] = new_directories
        
    # set before_script (restore artifacts) and before_cache (store artifacts)
    if "before_script" not in travis_setting:
        travis_setting["before_script"] = []
    if "before_cache" not in travis_setting:
        travis_setting["before_cache"] = []

    for suffix in RTS_ARTIFACT_SUFFIXES[tag]:
        if restore_by_suffix(tag, suffix) not in travis_setting["before_script"]:
            travis_setting["before_script"].append(restore_by_suffix(tag, suffix))
        if cache_by_suffix(tag, suffix) not in travis_setting["before_cache"]:
            travis_setting["before_cache"].append(cache_by_suffix(tag, suffix))
    
    # Replace maven command if it is necessary,
    # i.e. STARTS needs to call "starts:starts" explicitly to run
    if "script" not in travis_setting:
        # shouldn't reach here
        travis_setting["script"] = ["mvn test"]
    if use_predefined_command and RTS_RUN_COMMAND[tag] is not None:
        for idx in range(len(travis_setting["script"])):
            if "mvn" in travis_setting["script"][idx][:3]:
                travis_setting["script"][idx] = RTS_RUN_COMMAND[tag]

    if upload_reports:
        # Add notification
        if "notifications" not in travis_setting:
            travis_setting["notifications"] = {}
        if "webhooks" not in travis_setting["notifications"]:
            travis_setting["notifications"]["webhooks"] = {}
        travis_setting["notifications"]["webhooks"]["urls"] = [WEBHOOK_ENTRY]
        travis_setting["notifications"]["webhooks"]["on_success"] = "always"
        travis_setting["notifications"]["webhooks"]["on_failure"] = "always"
        travis_setting["notifications"]["webhooks"]["on_start"] = "never"
        travis_setting["notifications"]["webhooks"]["on_cancel"] = "never"
        travis_setting["notifications"]["webhooks"]["on_error"] = "always"

        # Add after_script to upload test reports as compressed file for now
        if "after_script" not in travis_setting:
            travis_setting["after_script"] = []
        if compress_test_reports() not in travis_setting["after_script"]:
            travis_setting["after_script"] = report_uploader(travis_setting["after_script"])

    write_file = open(os.path.join(repo_dir, ".travis.yml"), 'w')
    yaml.dump(travis_setting, write_file, default_flow_style=False, width=float("inf"))
    write_file.close()
    print("Finished Travis-CI setup for {}".format(tag))
    return os.path.join(repo_dir, ".travis.yml")

# Function that is used to include the Ekstazi RTS tool into the project
# assuming that the project is using Maven. In other words, the RTS tool
# can be included simply by modifying the pom.xml file
# @param repo_dir: the local git directory where the pom.xml files
#    can be found and modified.
# @return a list of files that are modified by the setup function
def ekstazi_setup(repo_dir):
    modified_files = []
    # add ekstazi in pom.xml file
    pm = PomManager(repo_dir)
    pm.add_plugin(EKSTAZI_XML_PATH)
    modified_files += pm.pom_list
    print("Finished Ekstazi setup")
    return modified_files

# Function that is used to include the STARTS RTS tool into the project
# assuming that the project is using Maven. In other words, the RTS tool
# can be included simply by modifying the pom.xml file
# @param repo_dir: the local git directory where the pom.xml files
#    can be found and modified.
# @return a list of files that are modified by the setup function
def starts_setup(repo_dir):
    modified_files = []
    # add starts (and surefire if it is not included) in pom.xml file
    pm = PomManager(repo_dir)
    pm.add_plugin(STARTS_XML_PATH)
    pm.add_plugin(SUREFIRE_XML_PATH)
    
    modified_files += pm.pom_list
    print("Finished STARTS setup")
    return modified_files

# Wrapper function that concatenate the setup function for RTS and CI,
# which will be called by user to perform the corresponding setup
# @param rts_setup_function: the setup function for enabling RTS tool,
#    the function should only accept a directory as argument 
#    or need only a directory due to "partial" Python feature
# @param ci_setup_function: the setup function for using RTS tool on CI,
#    the function should only accept a directory as argument 
#    or need only a directory due to "partial" Python feature
# @param repo_dir: the local git directory where the files needed by
#    rts_setup_function and ci_setup_function can be found and modified.
# @return a list of files that are modified by the setup function
def setup_template(rts_setup_function, ci_setup_function, repo_dir):
    modified_files = rts_setup_function(repo_dir)
    modified_files.append(ci_setup_function(repo_dir))
    return modified_files